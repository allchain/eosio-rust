initSidebarItems({"enum":[["Either",""],["Payer",""]],"fn":[["active_producers","Gets the top 21 producers"],["assert_ripemd160","Tests if the RIPEMD160 hash generated from data matches the provided digest."],["assert_sha1","Tests if the SHA1 hash generated from data matches the provided digest."],["assert_sha256","Tests if the SHA256 hash generated from data matches the provided digest."],["assert_sha512","Tests if the SHA512 hash generated from data matches the provided digest."],["cancel_deferred","Cancels a deferred transaction"],["check","Aborts processing of this action and unwinds all pending changes if the test condition is true"],["check_code","Aborts processing of this action and unwinds all pending changes if the test condition is true"],["creation_time","Returns the creation time of an account"],["current_block_time","Gets the current time as a block timestamp"],["current_data_stream","Get a `DataStream` of the current action data"],["current_receiver","Get the current receiver of the action."],["current_time_point","Returns the time in microseconds from 1970 of the current block as a `TimePoint`"],["current_time_point_sec","Gets the current time as seconds"],["eosio_exit","This method will abort execution of wasm without failing the contract. This is used to bypass all cleanup / destructors that would normally be called."],["expiration","Gets the expiration time"],["get_blockchain_parameters","Retrieve the blolckchain parameters"],["get_resource_limits","Get the resource limits of an account"],["has_auth","Verifies that `name` name has auth."],["has_transaction_authority","Checks if a transaction is authorized by a provided set of keys and permissions"],["has_transaction_authority_bytes","Checks if a transaction is authorized by a provided set of keys and permissions"],["is_account","Verifies that `name` is an account."],["is_feature_activated",""],["is_privileged","Check if an account is privileged"],["permission_last_used","Returns the last used time of a permission"],["preactivate_feature",""],["publication","Gets the publication time"],["read_action_data","Reads action data"],["require_auth","Verifies that `name` exists in the set of provided auths on a action. Throws if not found."],["require_level",""],["require_perm",""],["require_permission","Verifies that `name` exists in the set of provided auths on a action. Throws if not found."],["require_recipient","Add the specified account to set of accounts to be notified"],["ripemd160","Hashes `data` using RIPEMD160."],["send_context_free_inline_action","Sends a context free inline action."],["send_deferred","Sends a deferred transaction"],["send_deferred_bytes","Sends a deferred transaction from raw bytes."],["send_inline_action","Sends an inline action."],["set_blockchain_parameters","Set the blockchain parameters"],["set_privileged","Set the privileged status of an account"],["set_proposed_producers","Proposes a schedule change"],["set_resource_limits","Set the resource limits of an account"],["sha1","Hashes `data` using SHA1."],["sha256","Hashes `data` using SHA256."],["sha512","Hashes `data` using SHA512."]],"macro":[["print","Prints arbitrary data to the nodeos console"]],"struct":[["PrimaryTableCursor","Cursor for a primary table index"],["PrimaryTableIterator","Iterator for a `PrimaryTableIndex`"],["SecondaryTableCursor","Cursor for a `SecondaryTableIndex`"],["SecondaryTableIterator","Iterate over a secondary table index"],["SingletonIndex","TODO docs"]],"trait":[["Check",""],["IntoNativeSecondaryKey","Trait for types that can be turned into types that are native secondary keys"],["NativeSecondaryKey","Trait for types that are natively supported by EOSIO to be used as secondary keys"],["PrimaryTableIndexExt","Trait for functions of a `PrimaryTableIndex` that only apply within a smart contract"],["Print","Trait for types that can be printed from within EOSIO smart contracts"],["TableCursor","Table Cursor"],["TableIndex","Table index"],["TableIterator","Table iterator"]],"type":[["EndFn",""],["FindPrimaryArrayFn",""],["FindPrimaryFn",""],["FindPrimaryValueFn",""],["FindSecondaryArrayFn",""],["FindSecondaryFn",""],["FindSecondaryValueFn",""],["LowerboundArrayFn",""],["LowerboundFn",""],["LowerboundValueFn",""],["NextFn",""],["PreviousFn",""],["RemoveFn",""],["StoreArrayFn",""],["StoreFn",""],["StoreValueFn",""],["UpdateArrayFn",""],["UpdateFn",""],["UpdateValueFn",""],["UpperboundArrayFn",""],["UpperboundFn",""],["UpperboundValueFn",""]]});